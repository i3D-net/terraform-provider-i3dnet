// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_locations

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func LocationsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"locations": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"country_id": schema.Int64Attribute{
							Computed:            true,
							Description:         "Country ID of the location",
							MarkdownDescription: "Country ID of the location",
						},
						"country_name": schema.StringAttribute{
							Computed:            true,
							Description:         "Country name of the Location",
							MarkdownDescription: "Country name of the Location",
						},
						"country_short_name": schema.StringAttribute{
							Computed:            true,
							Description:         "Country short name of the Location",
							MarkdownDescription: "Country short name of the Location",
						},
						"display_name": schema.StringAttribute{
							Computed:            true,
							Description:         "Display name of the location",
							MarkdownDescription: "Display name of the location",
						},
						"id": schema.Int64Attribute{
							Computed:            true,
							Description:         "ID of the location",
							MarkdownDescription: "ID of the location",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the location",
							MarkdownDescription: "Name of the location",
						},
						"short_name": schema.StringAttribute{
							Computed:            true,
							Description:         "Short name of the location",
							MarkdownDescription: "Short name of the location",
						},
					},
					CustomType: LocationsType{
						ObjectType: types.ObjectType{
							AttrTypes: LocationsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type LocationsModel struct {
	Locations types.Set `tfsdk:"locations"`
}

var _ basetypes.ObjectTypable = LocationsType{}

type LocationsType struct {
	basetypes.ObjectType
}

func (t LocationsType) Equal(o attr.Type) bool {
	other, ok := o.(LocationsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LocationsType) String() string {
	return "LocationsType"
}

func (t LocationsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	countryIdAttribute, ok := attributes["country_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country_id is missing from object`)

		return nil, diags
	}

	countryIdVal, ok := countryIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country_id expected to be basetypes.Int64Value, was: %T`, countryIdAttribute))
	}

	countryNameAttribute, ok := attributes["country_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country_name is missing from object`)

		return nil, diags
	}

	countryNameVal, ok := countryNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country_name expected to be basetypes.StringValue, was: %T`, countryNameAttribute))
	}

	countryShortNameAttribute, ok := attributes["country_short_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country_short_name is missing from object`)

		return nil, diags
	}

	countryShortNameVal, ok := countryShortNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country_short_name expected to be basetypes.StringValue, was: %T`, countryShortNameAttribute))
	}

	displayNameAttribute, ok := attributes["display_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_name is missing from object`)

		return nil, diags
	}

	displayNameVal, ok := displayNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_name expected to be basetypes.StringValue, was: %T`, displayNameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	shortNameAttribute, ok := attributes["short_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`short_name is missing from object`)

		return nil, diags
	}

	shortNameVal, ok := shortNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`short_name expected to be basetypes.StringValue, was: %T`, shortNameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LocationsValue{
		CountryId:        countryIdVal,
		CountryName:      countryNameVal,
		CountryShortName: countryShortNameVal,
		DisplayName:      displayNameVal,
		Id:               idVal,
		Name:             nameVal,
		ShortName:        shortNameVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewLocationsValueNull() LocationsValue {
	return LocationsValue{
		state: attr.ValueStateNull,
	}
}

func NewLocationsValueUnknown() LocationsValue {
	return LocationsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLocationsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LocationsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LocationsValue Attribute Value",
				"While creating a LocationsValue value, a missing attribute value was detected. "+
					"A LocationsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LocationsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LocationsValue Attribute Type",
				"While creating a LocationsValue value, an invalid attribute value was detected. "+
					"A LocationsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LocationsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LocationsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LocationsValue Attribute Value",
				"While creating a LocationsValue value, an extra attribute value was detected. "+
					"A LocationsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LocationsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLocationsValueUnknown(), diags
	}

	countryIdAttribute, ok := attributes["country_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country_id is missing from object`)

		return NewLocationsValueUnknown(), diags
	}

	countryIdVal, ok := countryIdAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country_id expected to be basetypes.Int64Value, was: %T`, countryIdAttribute))
	}

	countryNameAttribute, ok := attributes["country_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country_name is missing from object`)

		return NewLocationsValueUnknown(), diags
	}

	countryNameVal, ok := countryNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country_name expected to be basetypes.StringValue, was: %T`, countryNameAttribute))
	}

	countryShortNameAttribute, ok := attributes["country_short_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`country_short_name is missing from object`)

		return NewLocationsValueUnknown(), diags
	}

	countryShortNameVal, ok := countryShortNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`country_short_name expected to be basetypes.StringValue, was: %T`, countryShortNameAttribute))
	}

	displayNameAttribute, ok := attributes["display_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`display_name is missing from object`)

		return NewLocationsValueUnknown(), diags
	}

	displayNameVal, ok := displayNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`display_name expected to be basetypes.StringValue, was: %T`, displayNameAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewLocationsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewLocationsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	shortNameAttribute, ok := attributes["short_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`short_name is missing from object`)

		return NewLocationsValueUnknown(), diags
	}

	shortNameVal, ok := shortNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`short_name expected to be basetypes.StringValue, was: %T`, shortNameAttribute))
	}

	if diags.HasError() {
		return NewLocationsValueUnknown(), diags
	}

	return LocationsValue{
		CountryId:        countryIdVal,
		CountryName:      countryNameVal,
		CountryShortName: countryShortNameVal,
		DisplayName:      displayNameVal,
		Id:               idVal,
		Name:             nameVal,
		ShortName:        shortNameVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewLocationsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LocationsValue {
	object, diags := NewLocationsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLocationsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LocationsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLocationsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLocationsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLocationsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLocationsValueMust(LocationsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LocationsType) ValueType(ctx context.Context) attr.Value {
	return LocationsValue{}
}

var _ basetypes.ObjectValuable = LocationsValue{}

type LocationsValue struct {
	CountryId        basetypes.Int64Value  `tfsdk:"country_id"`
	CountryName      basetypes.StringValue `tfsdk:"country_name"`
	CountryShortName basetypes.StringValue `tfsdk:"country_short_name"`
	DisplayName      basetypes.StringValue `tfsdk:"display_name"`
	Id               basetypes.Int64Value  `tfsdk:"id"`
	Name             basetypes.StringValue `tfsdk:"name"`
	ShortName        basetypes.StringValue `tfsdk:"short_name"`
	state            attr.ValueState
}

func (v LocationsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 7)

	var val tftypes.Value
	var err error

	attrTypes["country_id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["country_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["country_short_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["display_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["short_name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 7)

		val, err = v.CountryId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["country_id"] = val

		val, err = v.CountryName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["country_name"] = val

		val, err = v.CountryShortName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["country_short_name"] = val

		val, err = v.DisplayName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["display_name"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.ShortName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["short_name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LocationsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LocationsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LocationsValue) String() string {
	return "LocationsValue"
}

func (v LocationsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"country_id":         basetypes.Int64Type{},
		"country_name":       basetypes.StringType{},
		"country_short_name": basetypes.StringType{},
		"display_name":       basetypes.StringType{},
		"id":                 basetypes.Int64Type{},
		"name":               basetypes.StringType{},
		"short_name":         basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"country_id":         v.CountryId,
			"country_name":       v.CountryName,
			"country_short_name": v.CountryShortName,
			"display_name":       v.DisplayName,
			"id":                 v.Id,
			"name":               v.Name,
			"short_name":         v.ShortName,
		})

	return objVal, diags
}

func (v LocationsValue) Equal(o attr.Value) bool {
	other, ok := o.(LocationsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CountryId.Equal(other.CountryId) {
		return false
	}

	if !v.CountryName.Equal(other.CountryName) {
		return false
	}

	if !v.CountryShortName.Equal(other.CountryShortName) {
		return false
	}

	if !v.DisplayName.Equal(other.DisplayName) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.ShortName.Equal(other.ShortName) {
		return false
	}

	return true
}

func (v LocationsValue) Type(ctx context.Context) attr.Type {
	return LocationsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LocationsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"country_id":         basetypes.Int64Type{},
		"country_name":       basetypes.StringType{},
		"country_short_name": basetypes.StringType{},
		"display_name":       basetypes.StringType{},
		"id":                 basetypes.Int64Type{},
		"name":               basetypes.StringType{},
		"short_name":         basetypes.StringType{},
	}
}
