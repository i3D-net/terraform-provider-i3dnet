// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_servers

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ServersDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"servers": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"created_at": schema.Int64Attribute{
							Computed:            true,
							Description:         "Server creation timestamp.",
							MarkdownDescription: "Server creation timestamp.",
						},
						"delivered_at": schema.Int64Attribute{
							Computed:            true,
							Description:         "Server delivery timestamp.",
							MarkdownDescription: "Server delivery timestamp.",
						},
						"instance_type": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"id": schema.Int64Attribute{
									Computed:            true,
									Description:         "Instance type ID",
									MarkdownDescription: "Instance type ID",
								},
								"name": schema.StringAttribute{
									Computed:            true,
									Description:         "Instance type name",
									MarkdownDescription: "Instance type name",
								},
							},
							CustomType: InstanceTypeType{
								ObjectType: types.ObjectType{
									AttrTypes: InstanceTypeValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Server instance type.",
							MarkdownDescription: "Server instance type.",
						},
						"ip_addresses": schema.ListNestedAttribute{
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"ip_address": schema.StringAttribute{
										Computed:            true,
										Description:         "Server IP address.",
										MarkdownDescription: "Server IP address.",
									},
								},
								CustomType: IpAddressesType{
									ObjectType: types.ObjectType{
										AttrTypes: IpAddressesValue{}.AttributeTypes(ctx),
									},
								},
							},
							Computed:            true,
							Description:         "Server IP address details.",
							MarkdownDescription: "Server IP address details.",
						},
						"location": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"id": schema.Int64Attribute{
									Computed:            true,
									Description:         "ID of the location",
									MarkdownDescription: "ID of the location",
								},
								"name": schema.StringAttribute{
									Computed:            true,
									Description:         "Name of the location",
									MarkdownDescription: "Name of the location",
								},
							},
							CustomType: LocationType{
								ObjectType: types.ObjectType{
									AttrTypes: LocationValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Server location.",
							MarkdownDescription: "Server location.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "Server host name.",
							MarkdownDescription: "Server host name.",
						},
						"os": schema.SingleNestedAttribute{
							Attributes: map[string]schema.Attribute{
								"slug": schema.StringAttribute{
									Computed:            true,
									Description:         "Identifier of the OS. Available operating systems can be obtained from /v3/operatingsystem. Use the `slug` field from the response.",
									MarkdownDescription: "Identifier of the OS. Available operating systems can be obtained from /v3/operatingsystem. Use the `slug` field from the response.",
								},
							},
							CustomType: OsType{
								ObjectType: types.ObjectType{
									AttrTypes: OsValue{}.AttributeTypes(ctx),
								},
							},
							Computed:            true,
							Description:         "Server operating system.",
							MarkdownDescription: "Server operating system.",
						},
						"released_at": schema.Int64Attribute{
							Computed:            true,
							Description:         "Server release timestamp.",
							MarkdownDescription: "Server release timestamp.",
						},
						"status": schema.StringAttribute{
							Computed:            true,
							Description:         "Server delivery status.<br /><li><ul>created</ul><ul>discovering</ul><ul>discovered</ul><ul>allocating</ul><ul>allocated</ul><ul>configuring_network</ul><ul>network_configured</ul><ul>provisioning</ul><ul>provisioned</ul><ul>delivered</ul><ul>failed</ul><ul>releasing</ul><ul>released</ul></li>",
							MarkdownDescription: "Server delivery status.<br /><li><ul>created</ul><ul>discovering</ul><ul>discovered</ul><ul>allocating</ul><ul>allocated</ul><ul>configuring_network</ul><ul>network_configured</ul><ul>provisioning</ul><ul>provisioned</ul><ul>delivered</ul><ul>failed</ul><ul>releasing</ul><ul>released</ul></li>",
						},
						"status_message": schema.StringAttribute{
							Computed:            true,
							Description:         "Status message.",
							MarkdownDescription: "Status message.",
						},
						"uuid": schema.StringAttribute{
							Computed:            true,
							Description:         "Server UUID.",
							MarkdownDescription: "Server UUID.",
						},
					},
					CustomType: ServersType{
						ObjectType: types.ObjectType{
							AttrTypes: ServersValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
		},
	}
}

type ServersModel struct {
	Servers types.Set `tfsdk:"servers"`
}

var _ basetypes.ObjectTypable = ServersType{}

type ServersType struct {
	basetypes.ObjectType
}

func (t ServersType) Equal(o attr.Type) bool {
	other, ok := o.(ServersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ServersType) String() string {
	return "ServersType"
}

func (t ServersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return nil, diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.Int64Value, was: %T`, createdAtAttribute))
	}

	deliveredAtAttribute, ok := attributes["delivered_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delivered_at is missing from object`)

		return nil, diags
	}

	deliveredAtVal, ok := deliveredAtAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delivered_at expected to be basetypes.Int64Value, was: %T`, deliveredAtAttribute))
	}

	instanceTypeAttribute, ok := attributes["instance_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instance_type is missing from object`)

		return nil, diags
	}

	instanceTypeVal, ok := instanceTypeAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instance_type expected to be basetypes.ObjectValue, was: %T`, instanceTypeAttribute))
	}

	ipAddressesAttribute, ok := attributes["ip_addresses"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_addresses is missing from object`)

		return nil, diags
	}

	ipAddressesVal, ok := ipAddressesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_addresses expected to be basetypes.ListValue, was: %T`, ipAddressesAttribute))
	}

	locationAttribute, ok := attributes["location"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`location is missing from object`)

		return nil, diags
	}

	locationVal, ok := locationAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`location expected to be basetypes.ObjectValue, was: %T`, locationAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	osAttribute, ok := attributes["os"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`os is missing from object`)

		return nil, diags
	}

	osVal, ok := osAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`os expected to be basetypes.ObjectValue, was: %T`, osAttribute))
	}

	releasedAtAttribute, ok := attributes["released_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`released_at is missing from object`)

		return nil, diags
	}

	releasedAtVal, ok := releasedAtAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`released_at expected to be basetypes.Int64Value, was: %T`, releasedAtAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	statusMessageAttribute, ok := attributes["status_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status_message is missing from object`)

		return nil, diags
	}

	statusMessageVal, ok := statusMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status_message expected to be basetypes.StringValue, was: %T`, statusMessageAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return nil, diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ServersValue{
		CreatedAt:     createdAtVal,
		DeliveredAt:   deliveredAtVal,
		InstanceType:  instanceTypeVal,
		IpAddresses:   ipAddressesVal,
		Location:      locationVal,
		Name:          nameVal,
		Os:            osVal,
		ReleasedAt:    releasedAtVal,
		Status:        statusVal,
		StatusMessage: statusMessageVal,
		Uuid:          uuidVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewServersValueNull() ServersValue {
	return ServersValue{
		state: attr.ValueStateNull,
	}
}

func NewServersValueUnknown() ServersValue {
	return ServersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewServersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ServersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ServersValue Attribute Value",
				"While creating a ServersValue value, a missing attribute value was detected. "+
					"A ServersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ServersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ServersValue Attribute Type",
				"While creating a ServersValue value, an invalid attribute value was detected. "+
					"A ServersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ServersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ServersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ServersValue Attribute Value",
				"While creating a ServersValue value, an extra attribute value was detected. "+
					"A ServersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ServersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewServersValueUnknown(), diags
	}

	createdAtAttribute, ok := attributes["created_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`created_at is missing from object`)

		return NewServersValueUnknown(), diags
	}

	createdAtVal, ok := createdAtAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`created_at expected to be basetypes.Int64Value, was: %T`, createdAtAttribute))
	}

	deliveredAtAttribute, ok := attributes["delivered_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`delivered_at is missing from object`)

		return NewServersValueUnknown(), diags
	}

	deliveredAtVal, ok := deliveredAtAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`delivered_at expected to be basetypes.Int64Value, was: %T`, deliveredAtAttribute))
	}

	instanceTypeAttribute, ok := attributes["instance_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instance_type is missing from object`)

		return NewServersValueUnknown(), diags
	}

	instanceTypeVal, ok := instanceTypeAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instance_type expected to be basetypes.ObjectValue, was: %T`, instanceTypeAttribute))
	}

	ipAddressesAttribute, ok := attributes["ip_addresses"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_addresses is missing from object`)

		return NewServersValueUnknown(), diags
	}

	ipAddressesVal, ok := ipAddressesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_addresses expected to be basetypes.ListValue, was: %T`, ipAddressesAttribute))
	}

	locationAttribute, ok := attributes["location"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`location is missing from object`)

		return NewServersValueUnknown(), diags
	}

	locationVal, ok := locationAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`location expected to be basetypes.ObjectValue, was: %T`, locationAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewServersValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	osAttribute, ok := attributes["os"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`os is missing from object`)

		return NewServersValueUnknown(), diags
	}

	osVal, ok := osAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`os expected to be basetypes.ObjectValue, was: %T`, osAttribute))
	}

	releasedAtAttribute, ok := attributes["released_at"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`released_at is missing from object`)

		return NewServersValueUnknown(), diags
	}

	releasedAtVal, ok := releasedAtAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`released_at expected to be basetypes.Int64Value, was: %T`, releasedAtAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewServersValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	statusMessageAttribute, ok := attributes["status_message"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status_message is missing from object`)

		return NewServersValueUnknown(), diags
	}

	statusMessageVal, ok := statusMessageAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status_message expected to be basetypes.StringValue, was: %T`, statusMessageAttribute))
	}

	uuidAttribute, ok := attributes["uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`uuid is missing from object`)

		return NewServersValueUnknown(), diags
	}

	uuidVal, ok := uuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`uuid expected to be basetypes.StringValue, was: %T`, uuidAttribute))
	}

	if diags.HasError() {
		return NewServersValueUnknown(), diags
	}

	return ServersValue{
		CreatedAt:     createdAtVal,
		DeliveredAt:   deliveredAtVal,
		InstanceType:  instanceTypeVal,
		IpAddresses:   ipAddressesVal,
		Location:      locationVal,
		Name:          nameVal,
		Os:            osVal,
		ReleasedAt:    releasedAtVal,
		Status:        statusVal,
		StatusMessage: statusMessageVal,
		Uuid:          uuidVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewServersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ServersValue {
	object, diags := NewServersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewServersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ServersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewServersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewServersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewServersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewServersValueMust(ServersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ServersType) ValueType(ctx context.Context) attr.Value {
	return ServersValue{}
}

var _ basetypes.ObjectValuable = ServersValue{}

type ServersValue struct {
	CreatedAt     basetypes.Int64Value  `tfsdk:"created_at"`
	DeliveredAt   basetypes.Int64Value  `tfsdk:"delivered_at"`
	InstanceType  basetypes.ObjectValue `tfsdk:"instance_type"`
	IpAddresses   basetypes.ListValue   `tfsdk:"ip_addresses"`
	Location      basetypes.ObjectValue `tfsdk:"location"`
	Name          basetypes.StringValue `tfsdk:"name"`
	Os            basetypes.ObjectValue `tfsdk:"os"`
	ReleasedAt    basetypes.Int64Value  `tfsdk:"released_at"`
	Status        basetypes.StringValue `tfsdk:"status"`
	StatusMessage basetypes.StringValue `tfsdk:"status_message"`
	Uuid          basetypes.StringValue `tfsdk:"uuid"`
	state         attr.ValueState
}

func (v ServersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 11)

	var val tftypes.Value
	var err error

	attrTypes["created_at"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["delivered_at"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["instance_type"] = basetypes.ObjectType{
		AttrTypes: InstanceTypeValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["ip_addresses"] = basetypes.ListType{
		ElemType: IpAddressesValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["location"] = basetypes.ObjectType{
		AttrTypes: LocationValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["os"] = basetypes.ObjectType{
		AttrTypes: OsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["released_at"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["status_message"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["uuid"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 11)

		val, err = v.CreatedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["created_at"] = val

		val, err = v.DeliveredAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["delivered_at"] = val

		val, err = v.InstanceType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["instance_type"] = val

		val, err = v.IpAddresses.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_addresses"] = val

		val, err = v.Location.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["location"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Os.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["os"] = val

		val, err = v.ReleasedAt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["released_at"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		val, err = v.StatusMessage.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status_message"] = val

		val, err = v.Uuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["uuid"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ServersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ServersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ServersValue) String() string {
	return "ServersValue"
}

func (v ServersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var instanceType basetypes.ObjectValue

	if v.InstanceType.IsNull() {
		instanceType = types.ObjectNull(
			InstanceTypeValue{}.AttributeTypes(ctx),
		)
	}

	if v.InstanceType.IsUnknown() {
		instanceType = types.ObjectUnknown(
			InstanceTypeValue{}.AttributeTypes(ctx),
		)
	}

	if !v.InstanceType.IsNull() && !v.InstanceType.IsUnknown() {
		instanceType = types.ObjectValueMust(
			InstanceTypeValue{}.AttributeTypes(ctx),
			v.InstanceType.Attributes(),
		)
	}

	ipAddresses := types.ListValueMust(
		IpAddressesType{
			basetypes.ObjectType{
				AttrTypes: IpAddressesValue{}.AttributeTypes(ctx),
			},
		},
		v.IpAddresses.Elements(),
	)

	if v.IpAddresses.IsNull() {
		ipAddresses = types.ListNull(
			IpAddressesType{
				basetypes.ObjectType{
					AttrTypes: IpAddressesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.IpAddresses.IsUnknown() {
		ipAddresses = types.ListUnknown(
			IpAddressesType{
				basetypes.ObjectType{
					AttrTypes: IpAddressesValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var location basetypes.ObjectValue

	if v.Location.IsNull() {
		location = types.ObjectNull(
			LocationValue{}.AttributeTypes(ctx),
		)
	}

	if v.Location.IsUnknown() {
		location = types.ObjectUnknown(
			LocationValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Location.IsNull() && !v.Location.IsUnknown() {
		location = types.ObjectValueMust(
			LocationValue{}.AttributeTypes(ctx),
			v.Location.Attributes(),
		)
	}

	var os basetypes.ObjectValue

	if v.Os.IsNull() {
		os = types.ObjectNull(
			OsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Os.IsUnknown() {
		os = types.ObjectUnknown(
			OsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Os.IsNull() && !v.Os.IsUnknown() {
		os = types.ObjectValueMust(
			OsValue{}.AttributeTypes(ctx),
			v.Os.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"created_at":   basetypes.Int64Type{},
		"delivered_at": basetypes.Int64Type{},
		"instance_type": basetypes.ObjectType{
			AttrTypes: InstanceTypeValue{}.AttributeTypes(ctx),
		},
		"ip_addresses": basetypes.ListType{
			ElemType: IpAddressesValue{}.Type(ctx),
		},
		"location": basetypes.ObjectType{
			AttrTypes: LocationValue{}.AttributeTypes(ctx),
		},
		"name": basetypes.StringType{},
		"os": basetypes.ObjectType{
			AttrTypes: OsValue{}.AttributeTypes(ctx),
		},
		"released_at":    basetypes.Int64Type{},
		"status":         basetypes.StringType{},
		"status_message": basetypes.StringType{},
		"uuid":           basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"created_at":     v.CreatedAt,
			"delivered_at":   v.DeliveredAt,
			"instance_type":  instanceType,
			"ip_addresses":   ipAddresses,
			"location":       location,
			"name":           v.Name,
			"os":             os,
			"released_at":    v.ReleasedAt,
			"status":         v.Status,
			"status_message": v.StatusMessage,
			"uuid":           v.Uuid,
		})

	return objVal, diags
}

func (v ServersValue) Equal(o attr.Value) bool {
	other, ok := o.(ServersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CreatedAt.Equal(other.CreatedAt) {
		return false
	}

	if !v.DeliveredAt.Equal(other.DeliveredAt) {
		return false
	}

	if !v.InstanceType.Equal(other.InstanceType) {
		return false
	}

	if !v.IpAddresses.Equal(other.IpAddresses) {
		return false
	}

	if !v.Location.Equal(other.Location) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Os.Equal(other.Os) {
		return false
	}

	if !v.ReleasedAt.Equal(other.ReleasedAt) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	if !v.StatusMessage.Equal(other.StatusMessage) {
		return false
	}

	if !v.Uuid.Equal(other.Uuid) {
		return false
	}

	return true
}

func (v ServersValue) Type(ctx context.Context) attr.Type {
	return ServersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ServersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"created_at":   basetypes.Int64Type{},
		"delivered_at": basetypes.Int64Type{},
		"instance_type": basetypes.ObjectType{
			AttrTypes: InstanceTypeValue{}.AttributeTypes(ctx),
		},
		"ip_addresses": basetypes.ListType{
			ElemType: IpAddressesValue{}.Type(ctx),
		},
		"location": basetypes.ObjectType{
			AttrTypes: LocationValue{}.AttributeTypes(ctx),
		},
		"name": basetypes.StringType{},
		"os": basetypes.ObjectType{
			AttrTypes: OsValue{}.AttributeTypes(ctx),
		},
		"released_at":    basetypes.Int64Type{},
		"status":         basetypes.StringType{},
		"status_message": basetypes.StringType{},
		"uuid":           basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = InstanceTypeType{}

type InstanceTypeType struct {
	basetypes.ObjectType
}

func (t InstanceTypeType) Equal(o attr.Type) bool {
	other, ok := o.(InstanceTypeType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t InstanceTypeType) String() string {
	return "InstanceTypeType"
}

func (t InstanceTypeType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return InstanceTypeValue{
		Id:    idVal,
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewInstanceTypeValueNull() InstanceTypeValue {
	return InstanceTypeValue{
		state: attr.ValueStateNull,
	}
}

func NewInstanceTypeValueUnknown() InstanceTypeValue {
	return InstanceTypeValue{
		state: attr.ValueStateUnknown,
	}
}

func NewInstanceTypeValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (InstanceTypeValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing InstanceTypeValue Attribute Value",
				"While creating a InstanceTypeValue value, a missing attribute value was detected. "+
					"A InstanceTypeValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InstanceTypeValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid InstanceTypeValue Attribute Type",
				"While creating a InstanceTypeValue value, an invalid attribute value was detected. "+
					"A InstanceTypeValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("InstanceTypeValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("InstanceTypeValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra InstanceTypeValue Attribute Value",
				"While creating a InstanceTypeValue value, an extra attribute value was detected. "+
					"A InstanceTypeValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra InstanceTypeValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewInstanceTypeValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewInstanceTypeValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewInstanceTypeValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewInstanceTypeValueUnknown(), diags
	}

	return InstanceTypeValue{
		Id:    idVal,
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewInstanceTypeValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) InstanceTypeValue {
	object, diags := NewInstanceTypeValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewInstanceTypeValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t InstanceTypeType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewInstanceTypeValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewInstanceTypeValueUnknown(), nil
	}

	if in.IsNull() {
		return NewInstanceTypeValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewInstanceTypeValueMust(InstanceTypeValue{}.AttributeTypes(ctx), attributes), nil
}

func (t InstanceTypeType) ValueType(ctx context.Context) attr.Value {
	return InstanceTypeValue{}
}

var _ basetypes.ObjectValuable = InstanceTypeValue{}

type InstanceTypeValue struct {
	Id    basetypes.Int64Value  `tfsdk:"id"`
	Name  basetypes.StringValue `tfsdk:"name"`
	state attr.ValueState
}

func (v InstanceTypeValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v InstanceTypeValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v InstanceTypeValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v InstanceTypeValue) String() string {
	return "InstanceTypeValue"
}

func (v InstanceTypeValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":   basetypes.Int64Type{},
		"name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":   v.Id,
			"name": v.Name,
		})

	return objVal, diags
}

func (v InstanceTypeValue) Equal(o attr.Value) bool {
	other, ok := o.(InstanceTypeValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v InstanceTypeValue) Type(ctx context.Context) attr.Type {
	return InstanceTypeType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v InstanceTypeValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":   basetypes.Int64Type{},
		"name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = IpAddressesType{}

type IpAddressesType struct {
	basetypes.ObjectType
}

func (t IpAddressesType) Equal(o attr.Type) bool {
	other, ok := o.(IpAddressesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t IpAddressesType) String() string {
	return "IpAddressesType"
}

func (t IpAddressesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ipAddressAttribute, ok := attributes["ip_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_address is missing from object`)

		return nil, diags
	}

	ipAddressVal, ok := ipAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_address expected to be basetypes.StringValue, was: %T`, ipAddressAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return IpAddressesValue{
		IpAddress: ipAddressVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewIpAddressesValueNull() IpAddressesValue {
	return IpAddressesValue{
		state: attr.ValueStateNull,
	}
}

func NewIpAddressesValueUnknown() IpAddressesValue {
	return IpAddressesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewIpAddressesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (IpAddressesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing IpAddressesValue Attribute Value",
				"While creating a IpAddressesValue value, a missing attribute value was detected. "+
					"A IpAddressesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IpAddressesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid IpAddressesValue Attribute Type",
				"While creating a IpAddressesValue value, an invalid attribute value was detected. "+
					"A IpAddressesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IpAddressesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("IpAddressesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra IpAddressesValue Attribute Value",
				"While creating a IpAddressesValue value, an extra attribute value was detected. "+
					"A IpAddressesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra IpAddressesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewIpAddressesValueUnknown(), diags
	}

	ipAddressAttribute, ok := attributes["ip_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_address is missing from object`)

		return NewIpAddressesValueUnknown(), diags
	}

	ipAddressVal, ok := ipAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_address expected to be basetypes.StringValue, was: %T`, ipAddressAttribute))
	}

	if diags.HasError() {
		return NewIpAddressesValueUnknown(), diags
	}

	return IpAddressesValue{
		IpAddress: ipAddressVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewIpAddressesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) IpAddressesValue {
	object, diags := NewIpAddressesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewIpAddressesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t IpAddressesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewIpAddressesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewIpAddressesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewIpAddressesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewIpAddressesValueMust(IpAddressesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t IpAddressesType) ValueType(ctx context.Context) attr.Value {
	return IpAddressesValue{}
}

var _ basetypes.ObjectValuable = IpAddressesValue{}

type IpAddressesValue struct {
	IpAddress basetypes.StringValue `tfsdk:"ip_address"`
	state     attr.ValueState
}

func (v IpAddressesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["ip_address"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.IpAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_address"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v IpAddressesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v IpAddressesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v IpAddressesValue) String() string {
	return "IpAddressesValue"
}

func (v IpAddressesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"ip_address": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"ip_address": v.IpAddress,
		})

	return objVal, diags
}

func (v IpAddressesValue) Equal(o attr.Value) bool {
	other, ok := o.(IpAddressesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IpAddress.Equal(other.IpAddress) {
		return false
	}

	return true
}

func (v IpAddressesValue) Type(ctx context.Context) attr.Type {
	return IpAddressesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v IpAddressesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ip_address": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LocationType{}

type LocationType struct {
	basetypes.ObjectType
}

func (t LocationType) Equal(o attr.Type) bool {
	other, ok := o.(LocationType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LocationType) String() string {
	return "LocationType"
}

func (t LocationType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LocationValue{
		Id:    idVal,
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewLocationValueNull() LocationValue {
	return LocationValue{
		state: attr.ValueStateNull,
	}
}

func NewLocationValueUnknown() LocationValue {
	return LocationValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLocationValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LocationValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LocationValue Attribute Value",
				"While creating a LocationValue value, a missing attribute value was detected. "+
					"A LocationValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LocationValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LocationValue Attribute Type",
				"While creating a LocationValue value, an invalid attribute value was detected. "+
					"A LocationValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LocationValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LocationValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LocationValue Attribute Value",
				"While creating a LocationValue value, an extra attribute value was detected. "+
					"A LocationValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LocationValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLocationValueUnknown(), diags
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewLocationValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.Int64Value, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewLocationValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewLocationValueUnknown(), diags
	}

	return LocationValue{
		Id:    idVal,
		Name:  nameVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewLocationValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LocationValue {
	object, diags := NewLocationValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLocationValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LocationType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLocationValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLocationValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLocationValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLocationValueMust(LocationValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LocationType) ValueType(ctx context.Context) attr.Value {
	return LocationValue{}
}

var _ basetypes.ObjectValuable = LocationValue{}

type LocationValue struct {
	Id    basetypes.Int64Value  `tfsdk:"id"`
	Name  basetypes.StringValue `tfsdk:"name"`
	state attr.ValueState
}

func (v LocationValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["id"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LocationValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LocationValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LocationValue) String() string {
	return "LocationValue"
}

func (v LocationValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"id":   basetypes.Int64Type{},
		"name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"id":   v.Id,
			"name": v.Name,
		})

	return objVal, diags
}

func (v LocationValue) Equal(o attr.Value) bool {
	other, ok := o.(LocationValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v LocationValue) Type(ctx context.Context) attr.Type {
	return LocationType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LocationValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"id":   basetypes.Int64Type{},
		"name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = OsType{}

type OsType struct {
	basetypes.ObjectType
}

func (t OsType) Equal(o attr.Type) bool {
	other, ok := o.(OsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OsType) String() string {
	return "OsType"
}

func (t OsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return nil, diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OsValue{
		Slug:  slugVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewOsValueNull() OsValue {
	return OsValue{
		state: attr.ValueStateNull,
	}
}

func NewOsValueUnknown() OsValue {
	return OsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OsValue Attribute Value",
				"While creating a OsValue value, a missing attribute value was detected. "+
					"A OsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OsValue Attribute Type",
				"While creating a OsValue value, an invalid attribute value was detected. "+
					"A OsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OsValue Attribute Value",
				"While creating a OsValue value, an extra attribute value was detected. "+
					"A OsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOsValueUnknown(), diags
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return NewOsValueUnknown(), diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	if diags.HasError() {
		return NewOsValueUnknown(), diags
	}

	return OsValue{
		Slug:  slugVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewOsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OsValue {
	object, diags := NewOsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOsValueMust(OsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OsType) ValueType(ctx context.Context) attr.Value {
	return OsValue{}
}

var _ basetypes.ObjectValuable = OsValue{}

type OsValue struct {
	Slug  basetypes.StringValue `tfsdk:"slug"`
	state attr.ValueState
}

func (v OsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["slug"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Slug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["slug"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OsValue) String() string {
	return "OsValue"
}

func (v OsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"slug": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"slug": v.Slug,
		})

	return objVal, diags
}

func (v OsValue) Equal(o attr.Value) bool {
	other, ok := o.(OsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Slug.Equal(other.Slug) {
		return false
	}

	return true
}

func (v OsValue) Type(ctx context.Context) attr.Type {
	return OsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"slug": basetypes.StringType{},
	}
}
