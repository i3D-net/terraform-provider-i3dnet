// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_flexmetal_server

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func FlexmetalServerResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"created_at": schema.Int64Attribute{
				Computed:            true,
				Description:         "Server creation timestamp.",
				MarkdownDescription: "Server creation timestamp.",
			},
			"delivered_at": schema.Int64Attribute{
				Computed:            true,
				Description:         "Server delivery timestamp.",
				MarkdownDescription: "Server delivery timestamp.",
			},
			"instance_type": schema.StringAttribute{
				Required:            true,
				Description:         "Server instance type. Available instance types can be obtained from /v3/flexMetal/location/{locationId}}/instanceTypes. Use the `name` field from the response.",
				MarkdownDescription: "Server instance type. Available instance types can be obtained from /v3/flexMetal/location/{locationId}}/instanceTypes. Use the `name` field from the response.",
			},
			"ip_addresses": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"ip_address": schema.StringAttribute{
							Computed:            true,
							Description:         "Server IP address.",
							MarkdownDescription: "Server IP address.",
						},
					},
					CustomType: IpAddressesType{
						ObjectType: types.ObjectType{
							AttrTypes: IpAddressesValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "Server IP address details.",
				MarkdownDescription: "Server IP address details.",
			},
			"location": schema.StringAttribute{
				Required:            true,
				Description:         "Server location. Available locations can be obtained from /v3/flexMetal/location. Use the `name` field from the response.",
				MarkdownDescription: "Server location. Available locations can be obtained from /v3/flexMetal/location. Use the `name` field from the response.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Server name or hostname, depending on the chosen OS. E.g. Talos requires a hostname but regular Linux OSs work with either.",
				MarkdownDescription: "Server name or hostname, depending on the chosen OS. E.g. Talos requires a hostname but regular Linux OSs work with either.",
			},
			"os": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"kernel_params": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"key": schema.StringAttribute{
									Required:            true,
									Description:         "Key of the kernel param",
									MarkdownDescription: "Key of the kernel param",
								},
								"value": schema.StringAttribute{
									Required:            true,
									Description:         "Value of the kernel param",
									MarkdownDescription: "Value of the kernel param",
								},
							},
							CustomType: KernelParamsType{
								ObjectType: types.ObjectType{
									AttrTypes: KernelParamsValue{}.AttributeTypes(ctx),
								},
							},
						},
						Optional:            true,
						Computed:            true,
						Description:         "Kernel params for the PXE stage of the OS installation. Most operating systems do not require these, but e.g. Talos does.",
						MarkdownDescription: "Kernel params for the PXE stage of the OS installation. Most operating systems do not require these, but e.g. Talos does.",
					},
					"partitions": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"filesystem": schema.StringAttribute{
									Required:            true,
									Description:         "Type of filesystem to use for the target. Allowed: ext2, ext3, ext4, xfs",
									MarkdownDescription: "Type of filesystem to use for the target. Allowed: ext2, ext3, ext4, xfs",
								},
								"size": schema.Int64Attribute{
									Required:            true,
									Description:         "The size of the partition, in MB. Use -1 to indicate usage of the remaining space on the disk.",
									MarkdownDescription: "The size of the partition, in MB. Use -1 to indicate usage of the remaining space on the disk.",
								},
								"target": schema.StringAttribute{
									Required:            true,
									Description:         "Mount point for the partition",
									MarkdownDescription: "Mount point for the partition",
								},
							},
							CustomType: PartitionsType{
								ObjectType: types.ObjectType{
									AttrTypes: PartitionsValue{}.AttributeTypes(ctx),
								},
							},
						},
						Optional:            true,
						Computed:            true,
						Description:         "Custom partitions for the OS installation. If not provided, the default partitioning scheme will be used.",
						MarkdownDescription: "Custom partitions for the OS installation. If not provided, the default partitioning scheme will be used.",
					},
					"slug": schema.StringAttribute{
						Required:            true,
						Description:         "Identifier of the OS. Available operating systems can be obtained from /v3/operatingsystem. Use the `slug` field from the response.",
						MarkdownDescription: "Identifier of the OS. Available operating systems can be obtained from /v3/operatingsystem. Use the `slug` field from the response.",
					},
				},
				CustomType: OsType{
					ObjectType: types.ObjectType{
						AttrTypes: OsValue{}.AttributeTypes(ctx),
					},
				},
				Required:            true,
				Description:         "Server operating system.",
				MarkdownDescription: "Server operating system.",
			},
			"post_install_script": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Post install script. A shell script (e.g. bash) that will be executed after your OS is installed. Currently only supported for Linux based operating systems.",
				MarkdownDescription: "Post install script. A shell script (e.g. bash) that will be executed after your OS is installed. Currently only supported for Linux based operating systems.",
			},
			"released_at": schema.Int64Attribute{
				Computed:            true,
				Description:         "Server release timestamp.",
				MarkdownDescription: "Server release timestamp.",
			},
			"ssh_key": schema.ListAttribute{
				ElementType:         types.StringType,
				Required:            true,
				Description:         "A list of SSH keys. You can either supply SSH key UUIDs from stored objects in /v3/sshKey or provide public keys directly. SSH keys are installed for the root user.",
				MarkdownDescription: "A list of SSH keys. You can either supply SSH key UUIDs from stored objects in /v3/sshKey or provide public keys directly. SSH keys are installed for the root user.",
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "Server delivery status.<br /><li><ul>created</ul><ul>discovering</ul><ul>discovered</ul><ul>allocating</ul><ul>allocated</ul><ul>configuring_network</ul><ul>network_configured</ul><ul>provisioning</ul><ul>provisioned</ul><ul>delivered</ul><ul>failed</ul><ul>releasing</ul><ul>released</ul></li>",
				MarkdownDescription: "Server delivery status.<br /><li><ul>created</ul><ul>discovering</ul><ul>discovered</ul><ul>allocating</ul><ul>allocated</ul><ul>configuring_network</ul><ul>network_configured</ul><ul>provisioning</ul><ul>provisioned</ul><ul>delivered</ul><ul>failed</ul><ul>releasing</ul><ul>released</ul></li>",
			},
			"status_message": schema.StringAttribute{
				Computed:            true,
				Description:         "Status message.",
				MarkdownDescription: "Status message.",
			},
			"tags": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "A list of tags. There is a maximum of 60 tags per server. Each tag must adhere to this pattern: ^[A-Za-z0-9_:-]{1,64}$",
				MarkdownDescription: "A list of tags. There is a maximum of 60 tags per server. Each tag must adhere to this pattern: ^[A-Za-z0-9_:-]{1,64}$",
			},
			"uuid": schema.StringAttribute{
				Computed:            true,
				Description:         "Server UUID.",
				MarkdownDescription: "Server UUID.",
			},
		},
	}
}

type FlexmetalServerModel struct {
	CreatedAt         types.Int64  `tfsdk:"created_at"`
	DeliveredAt       types.Int64  `tfsdk:"delivered_at"`
	InstanceType      types.String `tfsdk:"instance_type"`
	IpAddresses       types.List   `tfsdk:"ip_addresses"`
	Location          types.String `tfsdk:"location"`
	Name              types.String `tfsdk:"name"`
	Os                OsValue      `tfsdk:"os"`
	PostInstallScript types.String `tfsdk:"post_install_script"`
	ReleasedAt        types.Int64  `tfsdk:"released_at"`
	SshKey            types.List   `tfsdk:"ssh_key"`
	Status            types.String `tfsdk:"status"`
	StatusMessage     types.String `tfsdk:"status_message"`
	Tags              types.List   `tfsdk:"tags"`
	Uuid              types.String `tfsdk:"uuid"`
}

var _ basetypes.ObjectTypable = IpAddressesType{}

type IpAddressesType struct {
	basetypes.ObjectType
}

func (t IpAddressesType) Equal(o attr.Type) bool {
	other, ok := o.(IpAddressesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t IpAddressesType) String() string {
	return "IpAddressesType"
}

func (t IpAddressesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	ipAddressAttribute, ok := attributes["ip_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_address is missing from object`)

		return nil, diags
	}

	ipAddressVal, ok := ipAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_address expected to be basetypes.StringValue, was: %T`, ipAddressAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return IpAddressesValue{
		IpAddress: ipAddressVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewIpAddressesValueNull() IpAddressesValue {
	return IpAddressesValue{
		state: attr.ValueStateNull,
	}
}

func NewIpAddressesValueUnknown() IpAddressesValue {
	return IpAddressesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewIpAddressesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (IpAddressesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing IpAddressesValue Attribute Value",
				"While creating a IpAddressesValue value, a missing attribute value was detected. "+
					"A IpAddressesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IpAddressesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid IpAddressesValue Attribute Type",
				"While creating a IpAddressesValue value, an invalid attribute value was detected. "+
					"A IpAddressesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("IpAddressesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("IpAddressesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra IpAddressesValue Attribute Value",
				"While creating a IpAddressesValue value, an extra attribute value was detected. "+
					"A IpAddressesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra IpAddressesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewIpAddressesValueUnknown(), diags
	}

	ipAddressAttribute, ok := attributes["ip_address"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`ip_address is missing from object`)

		return NewIpAddressesValueUnknown(), diags
	}

	ipAddressVal, ok := ipAddressAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`ip_address expected to be basetypes.StringValue, was: %T`, ipAddressAttribute))
	}

	if diags.HasError() {
		return NewIpAddressesValueUnknown(), diags
	}

	return IpAddressesValue{
		IpAddress: ipAddressVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewIpAddressesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) IpAddressesValue {
	object, diags := NewIpAddressesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewIpAddressesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t IpAddressesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewIpAddressesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewIpAddressesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewIpAddressesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewIpAddressesValueMust(IpAddressesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t IpAddressesType) ValueType(ctx context.Context) attr.Value {
	return IpAddressesValue{}
}

var _ basetypes.ObjectValuable = IpAddressesValue{}

type IpAddressesValue struct {
	IpAddress basetypes.StringValue `tfsdk:"ip_address"`
	state     attr.ValueState
}

func (v IpAddressesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["ip_address"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.IpAddress.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["ip_address"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v IpAddressesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v IpAddressesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v IpAddressesValue) String() string {
	return "IpAddressesValue"
}

func (v IpAddressesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"ip_address": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"ip_address": v.IpAddress,
		})

	return objVal, diags
}

func (v IpAddressesValue) Equal(o attr.Value) bool {
	other, ok := o.(IpAddressesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IpAddress.Equal(other.IpAddress) {
		return false
	}

	return true
}

func (v IpAddressesValue) Type(ctx context.Context) attr.Type {
	return IpAddressesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v IpAddressesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"ip_address": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = OsType{}

type OsType struct {
	basetypes.ObjectType
}

func (t OsType) Equal(o attr.Type) bool {
	other, ok := o.(OsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t OsType) String() string {
	return "OsType"
}

func (t OsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	kernelParamsAttribute, ok := attributes["kernel_params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kernel_params is missing from object`)

		return nil, diags
	}

	kernelParamsVal, ok := kernelParamsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kernel_params expected to be basetypes.ListValue, was: %T`, kernelParamsAttribute))
	}

	partitionsAttribute, ok := attributes["partitions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`partitions is missing from object`)

		return nil, diags
	}

	partitionsVal, ok := partitionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`partitions expected to be basetypes.ListValue, was: %T`, partitionsAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return nil, diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return OsValue{
		KernelParams: kernelParamsVal,
		Partitions:   partitionsVal,
		Slug:         slugVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewOsValueNull() OsValue {
	return OsValue{
		state: attr.ValueStateNull,
	}
}

func NewOsValueUnknown() OsValue {
	return OsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewOsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (OsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing OsValue Attribute Value",
				"While creating a OsValue value, a missing attribute value was detected. "+
					"A OsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid OsValue Attribute Type",
				"While creating a OsValue value, an invalid attribute value was detected. "+
					"A OsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("OsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("OsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra OsValue Attribute Value",
				"While creating a OsValue value, an extra attribute value was detected. "+
					"A OsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra OsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewOsValueUnknown(), diags
	}

	kernelParamsAttribute, ok := attributes["kernel_params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kernel_params is missing from object`)

		return NewOsValueUnknown(), diags
	}

	kernelParamsVal, ok := kernelParamsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kernel_params expected to be basetypes.ListValue, was: %T`, kernelParamsAttribute))
	}

	partitionsAttribute, ok := attributes["partitions"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`partitions is missing from object`)

		return NewOsValueUnknown(), diags
	}

	partitionsVal, ok := partitionsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`partitions expected to be basetypes.ListValue, was: %T`, partitionsAttribute))
	}

	slugAttribute, ok := attributes["slug"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`slug is missing from object`)

		return NewOsValueUnknown(), diags
	}

	slugVal, ok := slugAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`slug expected to be basetypes.StringValue, was: %T`, slugAttribute))
	}

	if diags.HasError() {
		return NewOsValueUnknown(), diags
	}

	return OsValue{
		KernelParams: kernelParamsVal,
		Partitions:   partitionsVal,
		Slug:         slugVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewOsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) OsValue {
	object, diags := NewOsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewOsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t OsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewOsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewOsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewOsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewOsValueMust(OsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t OsType) ValueType(ctx context.Context) attr.Value {
	return OsValue{}
}

var _ basetypes.ObjectValuable = OsValue{}

type OsValue struct {
	KernelParams basetypes.ListValue   `tfsdk:"kernel_params"`
	Partitions   basetypes.ListValue   `tfsdk:"partitions"`
	Slug         basetypes.StringValue `tfsdk:"slug"`
	state        attr.ValueState
}

func (v OsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["kernel_params"] = basetypes.ListType{
		ElemType: KernelParamsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["partitions"] = basetypes.ListType{
		ElemType: PartitionsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["slug"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.KernelParams.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kernel_params"] = val

		val, err = v.Partitions.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["partitions"] = val

		val, err = v.Slug.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["slug"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v OsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v OsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v OsValue) String() string {
	return "OsValue"
}

func (v OsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	kernelParams := types.ListValueMust(
		KernelParamsType{
			basetypes.ObjectType{
				AttrTypes: KernelParamsValue{}.AttributeTypes(ctx),
			},
		},
		v.KernelParams.Elements(),
	)

	if v.KernelParams.IsNull() {
		kernelParams = types.ListNull(
			KernelParamsType{
				basetypes.ObjectType{
					AttrTypes: KernelParamsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.KernelParams.IsUnknown() {
		kernelParams = types.ListUnknown(
			KernelParamsType{
				basetypes.ObjectType{
					AttrTypes: KernelParamsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	partitions := types.ListValueMust(
		PartitionsType{
			basetypes.ObjectType{
				AttrTypes: PartitionsValue{}.AttributeTypes(ctx),
			},
		},
		v.Partitions.Elements(),
	)

	if v.Partitions.IsNull() {
		partitions = types.ListNull(
			PartitionsType{
				basetypes.ObjectType{
					AttrTypes: PartitionsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Partitions.IsUnknown() {
		partitions = types.ListUnknown(
			PartitionsType{
				basetypes.ObjectType{
					AttrTypes: PartitionsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"kernel_params": basetypes.ListType{
			ElemType: KernelParamsValue{}.Type(ctx),
		},
		"partitions": basetypes.ListType{
			ElemType: PartitionsValue{}.Type(ctx),
		},
		"slug": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"kernel_params": kernelParams,
			"partitions":    partitions,
			"slug":          v.Slug,
		})

	return objVal, diags
}

func (v OsValue) Equal(o attr.Value) bool {
	other, ok := o.(OsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.KernelParams.Equal(other.KernelParams) {
		return false
	}

	if !v.Partitions.Equal(other.Partitions) {
		return false
	}

	if !v.Slug.Equal(other.Slug) {
		return false
	}

	return true
}

func (v OsValue) Type(ctx context.Context) attr.Type {
	return OsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v OsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"kernel_params": basetypes.ListType{
			ElemType: KernelParamsValue{}.Type(ctx),
		},
		"partitions": basetypes.ListType{
			ElemType: PartitionsValue{}.Type(ctx),
		},
		"slug": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = KernelParamsType{}

type KernelParamsType struct {
	basetypes.ObjectType
}

func (t KernelParamsType) Equal(o attr.Type) bool {
	other, ok := o.(KernelParamsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t KernelParamsType) String() string {
	return "KernelParamsType"
}

func (t KernelParamsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return nil, diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return KernelParamsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewKernelParamsValueNull() KernelParamsValue {
	return KernelParamsValue{
		state: attr.ValueStateNull,
	}
}

func NewKernelParamsValueUnknown() KernelParamsValue {
	return KernelParamsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewKernelParamsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (KernelParamsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing KernelParamsValue Attribute Value",
				"While creating a KernelParamsValue value, a missing attribute value was detected. "+
					"A KernelParamsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("KernelParamsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid KernelParamsValue Attribute Type",
				"While creating a KernelParamsValue value, an invalid attribute value was detected. "+
					"A KernelParamsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("KernelParamsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("KernelParamsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra KernelParamsValue Attribute Value",
				"While creating a KernelParamsValue value, an extra attribute value was detected. "+
					"A KernelParamsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra KernelParamsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewKernelParamsValueUnknown(), diags
	}

	keyAttribute, ok := attributes["key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`key is missing from object`)

		return NewKernelParamsValueUnknown(), diags
	}

	keyVal, ok := keyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`key expected to be basetypes.StringValue, was: %T`, keyAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewKernelParamsValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewKernelParamsValueUnknown(), diags
	}

	return KernelParamsValue{
		Key:   keyVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewKernelParamsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) KernelParamsValue {
	object, diags := NewKernelParamsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewKernelParamsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t KernelParamsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewKernelParamsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewKernelParamsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewKernelParamsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewKernelParamsValueMust(KernelParamsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t KernelParamsType) ValueType(ctx context.Context) attr.Value {
	return KernelParamsValue{}
}

var _ basetypes.ObjectValuable = KernelParamsValue{}

type KernelParamsValue struct {
	Key   basetypes.StringValue `tfsdk:"key"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v KernelParamsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Key.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["key"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v KernelParamsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v KernelParamsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v KernelParamsValue) String() string {
	return "KernelParamsValue"
}

func (v KernelParamsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"key":   v.Key,
			"value": v.Value,
		})

	return objVal, diags
}

func (v KernelParamsValue) Equal(o attr.Value) bool {
	other, ok := o.(KernelParamsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Key.Equal(other.Key) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v KernelParamsValue) Type(ctx context.Context) attr.Type {
	return KernelParamsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v KernelParamsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"key":   basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = PartitionsType{}

type PartitionsType struct {
	basetypes.ObjectType
}

func (t PartitionsType) Equal(o attr.Type) bool {
	other, ok := o.(PartitionsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PartitionsType) String() string {
	return "PartitionsType"
}

func (t PartitionsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	filesystemAttribute, ok := attributes["filesystem"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filesystem is missing from object`)

		return nil, diags
	}

	filesystemVal, ok := filesystemAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filesystem expected to be basetypes.StringValue, was: %T`, filesystemAttribute))
	}

	sizeAttribute, ok := attributes["size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size is missing from object`)

		return nil, diags
	}

	sizeVal, ok := sizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size expected to be basetypes.Int64Value, was: %T`, sizeAttribute))
	}

	targetAttribute, ok := attributes["target"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target is missing from object`)

		return nil, diags
	}

	targetVal, ok := targetAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target expected to be basetypes.StringValue, was: %T`, targetAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PartitionsValue{
		Filesystem: filesystemVal,
		Size:       sizeVal,
		Target:     targetVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewPartitionsValueNull() PartitionsValue {
	return PartitionsValue{
		state: attr.ValueStateNull,
	}
}

func NewPartitionsValueUnknown() PartitionsValue {
	return PartitionsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPartitionsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PartitionsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PartitionsValue Attribute Value",
				"While creating a PartitionsValue value, a missing attribute value was detected. "+
					"A PartitionsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PartitionsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PartitionsValue Attribute Type",
				"While creating a PartitionsValue value, an invalid attribute value was detected. "+
					"A PartitionsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PartitionsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PartitionsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PartitionsValue Attribute Value",
				"While creating a PartitionsValue value, an extra attribute value was detected. "+
					"A PartitionsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PartitionsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPartitionsValueUnknown(), diags
	}

	filesystemAttribute, ok := attributes["filesystem"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filesystem is missing from object`)

		return NewPartitionsValueUnknown(), diags
	}

	filesystemVal, ok := filesystemAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filesystem expected to be basetypes.StringValue, was: %T`, filesystemAttribute))
	}

	sizeAttribute, ok := attributes["size"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`size is missing from object`)

		return NewPartitionsValueUnknown(), diags
	}

	sizeVal, ok := sizeAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`size expected to be basetypes.Int64Value, was: %T`, sizeAttribute))
	}

	targetAttribute, ok := attributes["target"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target is missing from object`)

		return NewPartitionsValueUnknown(), diags
	}

	targetVal, ok := targetAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target expected to be basetypes.StringValue, was: %T`, targetAttribute))
	}

	if diags.HasError() {
		return NewPartitionsValueUnknown(), diags
	}

	return PartitionsValue{
		Filesystem: filesystemVal,
		Size:       sizeVal,
		Target:     targetVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewPartitionsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PartitionsValue {
	object, diags := NewPartitionsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPartitionsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PartitionsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPartitionsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPartitionsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPartitionsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPartitionsValueMust(PartitionsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PartitionsType) ValueType(ctx context.Context) attr.Value {
	return PartitionsValue{}
}

var _ basetypes.ObjectValuable = PartitionsValue{}

type PartitionsValue struct {
	Filesystem basetypes.StringValue `tfsdk:"filesystem"`
	Size       basetypes.Int64Value  `tfsdk:"size"`
	Target     basetypes.StringValue `tfsdk:"target"`
	state      attr.ValueState
}

func (v PartitionsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["filesystem"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["size"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["target"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Filesystem.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["filesystem"] = val

		val, err = v.Size.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["size"] = val

		val, err = v.Target.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["target"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PartitionsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PartitionsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PartitionsValue) String() string {
	return "PartitionsValue"
}

func (v PartitionsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"filesystem": basetypes.StringType{},
		"size":       basetypes.Int64Type{},
		"target":     basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"filesystem": v.Filesystem,
			"size":       v.Size,
			"target":     v.Target,
		})

	return objVal, diags
}

func (v PartitionsValue) Equal(o attr.Value) bool {
	other, ok := o.(PartitionsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Filesystem.Equal(other.Filesystem) {
		return false
	}

	if !v.Size.Equal(other.Size) {
		return false
	}

	if !v.Target.Equal(other.Target) {
		return false
	}

	return true
}

func (v PartitionsValue) Type(ctx context.Context) attr.Type {
	return PartitionsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PartitionsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"filesystem": basetypes.StringType{},
		"size":       basetypes.Int64Type{},
		"target":     basetypes.StringType{},
	}
}
